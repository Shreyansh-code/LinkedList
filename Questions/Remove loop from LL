class Node{
public:    
    int data;
    Node* next;

    Node(int d){
        this->data=d;
        this->next=NULL;
    } 
};

Node* floydDetectLoop(Node* head){
    if(head==NULL)
    return NULL;
    Node* slow = head;
    Node* fast = head;

    while(slow!=NULL&& fast!= NULL){
        fast=fast->next;
        if(fast!=NULL){
            fast=fast->next;
        }
        slow=slow->next;
        if(slow==fast){
            return slow;
        }
    }
    return NULL;
}

Node* getbeginningOfLoop(Node* &head){
    if(head==NULL){
        return NULL;
    }
    Node* intersection = floydDetectLoop(head);
    Node* slow= head;

    while(slow!=intersection){
        slow=slow-> next;
        intersection = intersection->next;
    }
    return slow;
}

void removeLoop(Node* &head){
    if(head==NULL){
        return;
        }
    Node* start = getbeginningOfLoop(head);
    Node* temp = start;
    while(temp-> next!=start){
        temp=temp->next;
    }
    temp->next=NULL;
}
