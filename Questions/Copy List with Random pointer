/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
*************************************
Approach -1 with map
*************************************
Node* copyRandomList(Node* head) {
        // create a clone list
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        
        Node* temp=head;
        while(temp!=NULL){
            insertAtTail(cloneHead, cloneTail, temp->val);
            temp=temp->next;
        }
        //step 2
        unordered_map<Node*, Node*> mapOfNodes;
        
        Node* origin=head;
        Node* clone=cloneHead;
        while(origin!=NULL){
            mapOfNodes[origin] = clone;
            origin = origin->next;
            clone = clone->next;
        }
        origin = head;
        clone = cloneHead;
        while(origin!=NULL){
            clone->random = mapOfNodes[origin->random];
            origin = origin->next;
            clone=clone->next;
        }
        return cloneHead;
    }
    
};


*************************************
Approach -2 without map
*************************************
class Solution {
public:
    void insertAtTail(Node* &head, Node* &tail, int data){
        Node* newNode = new Node(data);
        if(head==NULL){
            head = newNode;
            tail = newNode;
        }
        else{
            tail->next = newNode;
            tail=newNode;
        }
    }
    
    
    Node* copyRandomList(Node* head) {
        //step1 clone list
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        
        Node* temp = head;
        while(temp!=NULL){
            insertAtTail(cloneHead, cloneTail, temp->val);
            temp = temp->next;
        }
        // step2 add clone nodesin between original nodes
        Node* originalNode = head;
        Node* cloneNode = cloneHead;
        
        while(originalNode != NULL && cloneNode != NULL){
            Node* next =  originalNode->next;
            originalNode->next = cloneNode;
            originalNode = next;
            
            next = cloneNode->next;
            cloneNode->next = originalNode;
            cloneNode = next;
        }
        // step3 random pointer insert
        Node* curr = head;
        while(curr!=NULL){
          if(curr->next!=NULL){
              curr->next->random = curr->random? curr->random->next:curr->random;
          }  
            curr=curr->next->next;
        }
        //step 4 revert step 4
        originalNode = head;
        cloneNode = cloneHead;
        
        while(originalNode != NULL && cloneNode != NULL){
            originalNode -> next = cloneNode -> next;
            originalNode = originalNode -> next;
             if(originalNode!=NULL){
                 cloneNode -> next = originalNode -> next;
             }   
            
            cloneNode = cloneNode -> next;
        }
        // step5 return ans;
        return cloneHead;
    }
};
